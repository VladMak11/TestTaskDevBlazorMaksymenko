@page "/user/create"
@page "/user/edit/{id}"

@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore;
@using System.Text;
@using AutoMapper;
@attribute [Authorize]

@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationStateProvider
@inject UserManager<ApplicationUser> _userManager
@inject IMapper _iMapper

<div class="card shadow border-0 my-4 col-12 col-md-8 col-lg-6 mx-auto">
    <div class="card-header bg-dark text-white text-center py-3">
        <h1 class="m-0">@Title User</h1>
    </div>
    <div class="card-body p-4">
        @if (IsLoading)
        {
            <p>Loading...</p>
        }
        else
        {
            <EditForm Model="objUser" OnValidSubmit="UpsertUserAsync">
                <DataAnnotationsValidator />
                <div class="row">
                    <div class="col-12">
                        <div class="form-group">
                            <label>Name</label>
                            <InputText @bind-Value="objUser.Name" class="form-control"></InputText>
                            <ValidationMessage For="()=>objUser.Name"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <label>E-mail</label>
                            <InputText @bind-Value="objUser.Email" class="form-control"></InputText>
                            <ValidationMessage For="()=>objUser.Email"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <label>Address</label>
                            <InputText @bind-Value="objUser.Address" class="form-control"></InputText>
                            <ValidationMessage For="()=>objUser.Address"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <label>Phone Number</label>
                            <InputText @bind-Value="objUser.PhoneNumber" class="form-control"></InputText>
                            <ValidationMessage For="()=>objUser.PhoneNumber"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <label>Initial Property Value Sum</label>
                            <InputNumber TValue="Decimal" @bind-Value="objUser.InitialPropertyValueSum" class="form-control"></InputNumber>
                            <ValidationMessage For="()=>objUser.InitialPropertyValueSum"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <label>Current Property Value Sum</label>
                            <InputNumber TValue="Decimal" @bind-Value="objUser.CurrentPropertyValueSum" class="form-control"></InputNumber>
                            <ValidationMessage For="()=>objUser.CurrentPropertyValueSum"></ValidationMessage>
                        </div>
                        <div class="form-group mb-2 mt-2 text-center">
                            <button  class="btn btn-primary">@Title</button>
                            <NavLink href="user" class="btn btn-secondary">Back to List</NavLink>
                        </div>
                    </div>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {

    [Parameter]
    public string Id { get; set; }

    private string Title { get; set; } = "Create";
    private UserVM objUser { get; set; } = new UserVM();
    public bool IsLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Id))
        {
            IsLoading = false;
        }
        else
        {
            Title = "Update";
            await LoadUserAsync();
        }

    }

    private async Task LoadUserAsync()
    {

        var searchUserinDB = await _userManager.FindByIdAsync(Id);
        objUser = _iMapper.Map<UserVM>(searchUserinDB);
        IsLoading = false;
    }

    private async Task UpsertUserAsync()
    {
        if (string.IsNullOrEmpty(objUser.Id))
        {
            var appUser = new ApplicationUser();
            appUser = _iMapper.Map<UserVM, ApplicationUser>(objUser, appUser);
            appUser.Id = Guid.NewGuid().ToString();
            await _userManager.CreateAsync(appUser, GenerateRandomPassword(13));
        }
        else
        {
            var UserToUpdate = await _userManager.FindByIdAsync(objUser.Id);
            if (UserToUpdate != null)
            {
                UserToUpdate = _iMapper.Map<UserVM,ApplicationUser>(objUser, UserToUpdate);
                await _userManager.UpdateAsync(UserToUpdate);
            }
        }

        _navigationManager.NavigateTo("user");
    }


    private string GenerateRandomPassword(int length)
    {
        const string validChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
        StringBuilder password = new StringBuilder();

        Random random = new Random();

        while (password.Length < length)
        {
            password.Append(validChars[random.Next(validChars.Length)]);
        }

        return password.ToString();
    }
}
