@page "/property"

@using AutoMapper;

@inject IUnitOfWork _unitOfWork
@inject PropertyHelper _propertyHelper
@inject IMapper _iMapper
@inject IJSRuntime _jsRuntime
@attribute [Authorize]

<_DeleteConfirmation ConfirmationChanged="ConfirmDeleteClickAsync"></_DeleteConfirmation>

<div class="container mt-4">
    <div class="row">
        <div class="col-6 d-flex justify-content-end">
            <h4 class="card-title text-black">Properties List</h4>
        </div>
        <div class="col-6 d-flex justify-content-end mb-2">
            <a href="property/create" class="btn btn-dark">
                <i class="bi bi-patch-plus"></i>
                <span class="ms-2">Add New Property</span>
            </a>
        </div>
    </div>
    @if (properties.Any())
    {
        <div class="table-responsive bg-white">
            <table class="table table-bordered mt-4 table-hover">
                <thead class="bg-dark">
                    <tr class="text-light">
                        <th>Name</th>
                        <th>Owner</th>
                        <th>Type</th>
                        <th>Purchase DateTime</th>
                        <th>Initial Value</th>
                        <th>Depreciation Period</th>
                        <th>Depreciation Value</th>
                        <th>Current Value</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in properties)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <td>@item.ApplicationUser.Name</td>
                            <td>@item.Type</td>
                            <td>@item.PurchaseDateTime.ToString("f")</td>
                            <td>@item.InitialValue</td>
                            <td>@item.DepreciationPeriod</td>
                            <td>@item.DepreciationValue</td>
                            <td>@item.CurrentValue</td>
                            <td>
                                <NavLink href="@($"property/edit/{item.Id}")" class="btn btn-primary"><i class="bi bi-pencil-square"></i></NavLink>
                                <button class="btn btn-danger" @onclick="async () => await HandleDelete(item.Id)"><i class="bi bi-trash-fill"></i></button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <p>No users found.</p>
    }
</div>



@code {
    private IEnumerable<PropertyVM> properties { get; set; } = new List<PropertyVM>();
    private int? DeletePropertyId { get; set; } = 0;
    protected override async Task OnInitializedAsync()
    {
        await LoadPropertiesAsync();
    }

    protected async Task LoadPropertiesAsync()
    {
        var propertyModels = await _unitOfWork.Properties.GetAllAsync(includeProp: "ApplicationUser");
        properties = propertyModels.Select(p => {
            var propertyVM = _iMapper.Map<PropertyVM>(p);
            propertyVM.CurrentValue = _propertyHelper.CalculationCurrentValue(p);
            return propertyVM;
        });
    }
    private async Task HandleDelete(int id)
    {
        DeletePropertyId = id;
        await _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    private async Task ConfirmDeleteClickAsync(bool isConfirmed)
    {
        if (isConfirmed && DeletePropertyId != 0)
        {
            var existingUser = await _unitOfWork.Properties.GetFirstOrDefaultAsync(x => x.Id == DeletePropertyId);
            
            await _unitOfWork.Properties.RemoveAsync(existingUser.Id);
            await _unitOfWork.SaveAsync();

            await LoadPropertiesAsync();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
    }
}
